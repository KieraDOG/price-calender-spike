{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monthNamesShort","weekdayNamesShort","StyledApp","styled","div","_templateObject","Container","_templateObject2","Months","_templateObject3","_ref","monthsToDisplay","Number","Month","_templateObject4","MonthHeader","_templateObject5","MonthWeekDays","_templateObject6","MonthWeekDay","_templateObject7","Weeks","_templateObject8","Week","_templateObject9","DayButton","button","_templateObject10","DayContainer","_templateObject11","Day","_templateObject12","DayDate","_templateObject13","DayExtra","_templateObject14","EmptyDay","_templateObject15","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showWeekdayNames","_this$state","react_default","a","createElement","dayzed_esm","onDateSelected","render","_ref2","calendars","getDateProps","getBackProps","getForwardProps","Boolean","length","map","calendar","key","concat","month","year","weekDayName","i","weeks","week","dateObj","j","Fragment","date","getDate","getDay","React","PureComponent","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ac5a150.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport Dayzed from 'dayzed';\n\nconst monthNamesShort = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec'\n];\nconst weekdayNamesShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nconst StyledApp = styled.div`\n  background: #f6f8fa;\n  height: 100vh;\n  \n  @media only screen and (min-width: 768px) {\n    padding: 10rem 0;\n  }\n`;\n\nconst Container = styled.div`\n  margin: 0 auto;\n  background: white;\n  padding: 2rem 1rem;\n  \n  @media only screen and (min-width: 768px) {\n    padding: 2rem 5rem;\n    max-width: 60vw;\n  }\n`;\n\nconst Months = styled.div`\n  --element-padding: 0.25rem 0;\n  --months-per-line: ${({ monthsToDisplay }) => Number(monthsToDisplay)};\n\n  @media only screen and (min-width: 768px) {\n    --element-padding: 0.75rem 0;\n  }\n\n  display: grid;\n  grid-template-columns: repeat(var(--months-per-line), 1fr);\n  grid-gap: 2rem;\n`;\n\nconst Month = styled.div`\n`;\n\nconst MonthHeader = styled.div`\n  padding: var(--element-padding);\n  text-align: center;\n  text-transform: uppercase;\n  font-weight: 600;\n`;\n\nconst MonthWeekDays = styled.div`\n  display: none;\n\n  @media only screen and (min-width: 768px) {\n    display: grid;\n    padding: var(--element-padding);\n    grid-template-columns: repeat(7, 1fr);\n    justify-items: center;\n    color: rgba(0,0,0,0.5);\n  }\n`;\n\nconst MonthWeekDay = styled.div`\n`;\n\nconst Weeks = styled.div`\n  padding: var(--element-padding);\n`;\n\nconst Week = styled.div`\n  --days-per-line: 1;\n  --days-gap: 0.75rem;\n\n  @media only screen and (min-width: 768px) {\n    --days-per-line: 7;\n    --days-gap: 0;\n  }\n\n  display: grid;\n  grid-template-columns: repeat(var(--days-per-line), 1fr);\n  grid-row-gap: var(--days-gap);\n  \n  & ~ & {\n    margin-top: var(--days-gap);\n  }\n`;\n\nconst DayButton = styled.button`\n  background: transparent;\n  outline: 0;\n  border: 0;\n  cursor: pointer;\n  border: 1px solid lightgrey;\n  font-size: medium;\n  text-align: left;\n\n  @media only screen and (min-width: 768px) {\n    text-align: center;\n    position: relative;\n    overflow: hidden;\n    height: 0;\n    padding-bottom: 100%;\n    /* clear overlapped border */\n    margin: -1px 0 0 -1px;\n  }\n`;\n\nconst DayContainer = styled.div`\n  @media only screen and (min-width: 768px) {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n`;\n\nconst Day = styled.div`\n  height: 100%;\n  display: grid;\n  grid-column-gap: 1.5rem;\n  align-items: center;\n  grid-template-columns: 50px 1fr auto;\n  padding: 0.5rem 1rem;\n\n  @media only screen and (min-width: 768px) {\n    justify-content: center;\n    align-content: center;\n    grid-template-columns: 1fr;\n    grid-row-gap: 0.5rem;\n  }\n`;\n\nconst DayDate = styled.div`\n  font-size: xx-large;\n`;\n\nconst DayExtra = styled.div`\n  font-size: small;\n  \n  @media only screen and (min-width: 768px) {\n    display: none;\n  }\n`;\n\nconst EmptyDay = styled.div`\n`;\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      monthsToDisplay: 1,\n      showWeekdayNames: true,\n    }\n  }\n\n  render() {\n    const { monthsToDisplay, showWeekdayNames } = this.state;\n\n    return (\n      <StyledApp>\n        <Container>\n          <h1>Price Calender Spike</h1>\n          <hr />\n          <br />\n          <Dayzed\n            onDateSelected={() => {}}\n            monthsToDisplay={monthsToDisplay}\n            render={({ \n              calendars,\n              getBackProps,\n              getForwardProps,\n              getDateProps,\n            }) => {\n              if (!Boolean(calendars.length)) {\n                return null;\n              }\n\n              return (\n                <Months monthsToDisplay={monthsToDisplay}>\n                  {calendars.map(calendar => (\n                    <Month\n                      key={`${calendar.month}${calendar.year}`}\n                    >\n                      <MonthHeader>\n                        {monthNamesShort[calendar.month]}\n                        &nbsp;\n                        {calendar.year}\n                      </MonthHeader>\n                      {showWeekdayNames && (\n                        <MonthWeekDays>\n                          {weekdayNamesShort.map((weekDayName, i) => (\n                            <MonthWeekDay key={`${weekDayName}${i}`}>{weekDayName}</MonthWeekDay>\n                          ))}\n                        </MonthWeekDays>\n                      )}\n                      <Weeks>\n                        {calendar.weeks.map((week, i) => (\n                          <Week key={`${week}${i}`}>\n                            {week.map((dateObj, j) => (\n                              <React.Fragment key={`${dateObj}${j}`}>\n                                {dateObj ? (\n                                  <DayButton\n                                    {...getDateProps({ dateObj })}\n                                  >\n                                    <DayContainer>\n                                      <Day>\n                                        <DayDate>{dateObj.date.getDate()}</DayDate>\n                                        <DayExtra>\n                                          {monthNamesShort[calendar.month]} {calendar.year}\n                                          <br />\n                                          {weekdayNamesShort[dateObj.date.getDay()]}\n                                        </DayExtra>\n                                        <div>\n                                          $1,000.00\n                                        </div>\n                                      </Day>\n                                    </DayContainer>\n                                  </DayButton>\n                                ) : (\n                                  <EmptyDay />\n                                )}\n                              </React.Fragment>\n                            ))}\n                          </Week>\n                        ))}\n                      </Weeks>\n                    </Month>\n                  ))}\n                </Months>\n              )\n            }}\n          />\n        </Container>\n      </StyledApp>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}